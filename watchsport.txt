(async () => {
  if (!window.Fuse) {
    await new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/fuse.js@7.0.0';
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  const teamNameMap = {
  "aew": "aew",
  "atlanta hawks": "atlanta hawks",
  "augsburg": "augsburg",
  "baltimore ravens": "baltimore ravens",
  "boston celtics": "boston celtics",
  "celta vigo": "celta vigo",
  "charlotte hornets": "charlotte hornets",
  "chicago bulls": "chicago bulls",
  "cleveland cavaliers": "cleveland cavaliers",
  "cruz azul": "cruz azul",
  "denver nuggets": "denver nuggets",
  "dortmund": "dortmund",
  "formula 1 - mexico city grand prix": "formula 1 - mexico city grand prix",
  "getafe": "getafe",
  "girona": "girona",
  "golden state warriors": "golden state warriors",
  "indiana pacers": "indiana pacers",
  "lanús": "lanús",
  "ldu quito": "ldu quito",
  "los angeles clippers": "los angeles clippers",
  "los angeles dodgers": "los angeles dodgers",
  "los angeles lakers": "los angeles lakers",
  "memphis grizzlies": "memphis grizzlies",
  "miami dolphins": "miami dolphins",
  "miami heat": "miami heat",
  "milwaukee bucks": "milwaukee bucks",
  "nascar cup series - xfinity 500": "nascar cup series - xfinity 500",
  "necaxa": "necaxa",
  "new orleans pelicans": "new orleans pelicans",
  "new york knicks": "new york knicks",
  "oklahoma city thunder": "oklahoma city thunder",
  "orlando magic": "orlando magic",
  "palmeiras": "palmeiras",
  "philadelphia 76ers": "philadelphia 76ers",
  "phoenix suns": "phoenix suns",
  "portland trail blazers": "portland trail blazers",
  "puebla": "puebla",
  "puerto de vega": "puerto de vega",
  "san antonio spurs": "san antonio spurs",
  "santos": "santos",
  "toronto blue jays": "toronto blue jays",
  "toronto raptors": "toronto raptors",
  "universidad chile": "universidad chile",
  "utah jazz": "utah jazz",
  "washington wizards": "washington wizards",
  "wwe raw": "wwe raw",
  "wwe smackdown": "wwe smackdown",
  "hawks": "atlanta hawks",
  "celtics": "boston celtics",
  "hornets": "charlotte hornets",
  "bulls": "chicago bulls",
  "cavaliers": "cleveland cavaliers",
  "nuggets": "denver nuggets",
  "warriors": "golden state warriors",
  "pacers": "indiana pacers",
  "clippers": "los angeles clippers",
  "lakers": "los angeles lakers",
  "grizzlies": "memphis grizzlies",
  "heat": "miami heat",
  "bucks": "milwaukee bucks",
  "pelicans": "new orleans pelicans",
  "knicks": "new york knicks",
  "thunder": "oklahoma city thunder",
  "magic": "orlando magic",
  "sixers": "philadelphia 76ers",
  "suns": "phoenix suns",
  "blazers": "portland trail blazers",
  "spurs": "san antonio spurs",
  "raptors": "toronto raptors",
  "jazz": "utah jazz",
  "wizards": "washington wizards"
};

  const roxieStreamsCached = [
  {title: "celta vigo vs puerto de vega", url: "https://roxiestreams.cc/soccer-streams-1"},
  {title: "lanús vs universidad chile", url: "https://roxiestreams.cc/soccer-streams-2"},
  {title: "ldu quito vs palmeiras", url: "https://roxiestreams.cc/soccer-streams-3"},
  {title: "augsburg vs dortmund", url: "https://roxiestreams.cc/soccer-streams-1"},
  {title: "getafe vs girona", url: "https://roxiestreams.cc/soccer-streams-2"},
  {title: "necaxa vs santos", url: "https://roxiestreams.cc/soccer-streams-3"},
  {title: "cruz azul vs puebla", url: "https://roxiestreams.cc/soccer-streams-4"},
  {title: "los angeles dodgers vs toronto blue jays", url: "https://roxiestreams.cc/mlb-streams-1"},
  {title: "charlotte hornets vs orlando magic", url: "https://roxiestreams.cc/nba-streams-1"},
  {title: "oklahoma city thunder vs washington wizards", url: "https://roxiestreams.cc/nba-streams-2"},
  {title: "golden state warriors vs milwaukee bucks", url: "https://roxiestreams.cc/nba-streams-3"},
  {title: "miami heat vs san antonio spurs", url: "https://roxiestreams.cc/nba-streams-4"},
  {title: "boston celtics vs philadelphia 76ers", url: "https://roxiestreams.cc/nba-streams-1"},
  {title: "atlanta hawks vs indiana pacers", url: "https://roxiestreams.cc/nba-streams-2"},
  {title: "cleveland cavaliers vs toronto raptors", url: "https://roxiestreams.cc/nba-streams-3"},
  {title: "chicago bulls vs new york knicks", url: "https://roxiestreams.cc/nba-streams-4"},
  {title: "los angeles lakers vs memphis grizzlies", url: "https://roxiestreams.cc/nba-streams-5"},
  {title: "phoenix suns vs utah jazz", url: "https://roxiestreams.cc/nba-streams-6"},
  {title: "denver nuggets vs portland trail blazers", url: "https://roxiestreams.cc/nba-streams-7"},
  {title: "los angeles clippers vs new orleans pelicans", url: "https://roxiestreams.cc/nba-streams-8"},
  {title: "nascar cup series - xfinity 500", url: "https://roxiestreams.cc/nascar"},
  {title: "formula 1 - mexico city grand prix", url: "https://roxiestreams.cc/f1-streams"},
  {title: "aew", url: "https://roxiestreams.cc/aew"},
  {title: "wwe smackdown", url: "https://roxiestreams.cc/wwe-streams"},
  {title: "wwe raw", url: "https://roxiestreams.cc/wwe-streams"},
  {title: "baltimore ravens vs miami dolphins", url: "https://roxiestreams.cc/nfl-streams-1"}
];

  const nbaTeams = new Set(["atlanta hawks","detroit pistons","toronto raptors","cleveland cavaliers","los angeles lakers","philadelphia 76ers","utah jazz","los angeles clippers","phoenix suns","orlando magic","oklahoma city thunder","washington wizards","dallas mavericks","houston rockets","memphis grizzlies","new york knicks","charlotte hornets","miami heat","minnesota timberwolves","milwaukee bucks","sacramento kings","chicago bulls","boston celtics","new orleans pelicans","san antonio spurs","portland trail blazers","golden state warriors","indiana pacers","denver nuggets"]);
  const premierLeagueTeams = new Set(["leeds","west ham","c palace","nottm forest","man united","man city","newcastle","brighton","brentford","liverpool","spurs"]);
  const laLigaTeams = new Set(["alaves","athletic bilbao","atm","atletico madrid","barcelona","celta vigo","elche","espanyol","getafe","girona","mallorca","osasuna","rayo vallecano","real betis","real madrid","real sociedad","real valladolid","sevilla","valencia","villarreal"]);
  const mlsTeams = new Set(["miami","atlanta","chicago","cincinnati","columbus","dallas","dc","houston","los angeles","minnesota","nashville","new england","new york","orlando","philadelphia","portland","real salt lake","seattle","sporting kansas city","san jose","toronto","vancouver"]);

function normalizeTeamName(name) {
  return teamNameMap[name.toLowerCase().trim()] || name.toLowerCase().trim();
}

  function normalizeTitle(title) {
    let t = title.toLowerCase().replace(/@/g, 'vs').trim();
    if (!t.includes('vs')) {
      return normalizeTeamName(t);
    }
    let teams = t.split('vs').map(s => normalizeTeamName(s.trim()));
    teams.sort();
    return teams.join(' vs ');
  }

const normalizedCache = roxieStreamsCached.map(item => ({
  title: normalizeTitle(item.title),
  url: item.url
}));

  const fuse = new Fuse(normalizedCache, {
    keys: ['title'],
    threshold: 0.3,
    includeScore: true,
    distance: 50,
    ignoreLocation: true,
  });

  function findBestMatch(eventTitle) {
    const lowerTitle = eventTitle.toLowerCase();
    if (lowerTitle.includes("ufc")) return "https://roxiestreams.cc/ufc";
    if (lowerTitle.includes("grand prix")) return "https://roxiestreams.cc/f1-streams";
    if (lowerTitle.includes("wwe")) return "https://roxiestreams.cc/wwe-streams";

    let teams = [];
    if (lowerTitle.includes("@")) {
      teams = lowerTitle.split("@").map(t => normalizeTeamName(t.trim()));
    } else if (lowerTitle.includes("vs")) {
      teams = lowerTitle.split("vs").map(t => normalizeTeamName(t.trim()));
    } else {
      teams = [normalizeTeamName(lowerTitle.trim())];
    }

    if (teams.length === 0) return 'https://roxiestreams.cc/missing';

    for (const entry of normalizedCache) {
      for (const team of teams) {
        if (entry.title.includes(team)) return entry.url;
      }
    }
    return 'https://roxiestreams.cc/missing';
  }

  function getEventTitleFromListDiv(listDiv) {
    if (!listDiv) return '';
    let titleText = '';
    listDiv.childNodes.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        const trimmed = node.textContent.trim();
        if (trimmed) titleText += trimmed + ' ';
      }
    });
    return titleText.trim();
  }

  function autofillHandler(e) {
    const gameId = e.currentTarget.getAttribute('data-target');
    const listDiv = e.currentTarget.closest('.list');
    const eventTitle = getEventTitleFromListDiv(listDiv).toLowerCase();
    console.log('Extracted event title:', eventTitle, 'for gameId:', gameId);

    let channelName = '';
    const leagueSpan = listDiv ? listDiv.querySelector('span.league') : null;
    if (leagueSpan) {
      const leagueText = leagueSpan.textContent.trim();
      if (!/^\d/.test(leagueText)) {
        channelName = leagueText;
      }
    }

    const nbaShortNames = Object.keys(teamNameMap).filter(key => nbaTeams.has(teamNameMap[key].toLowerCase()));
    const hasNbaShortName = nbaShortNames.some(shortName => eventTitle.includes(shortName.toLowerCase()));

    if ((!channelName || channelName.trim() === '') && hasNbaShortName) {
      channelName = 'NBA League Pass';
    }

    if (eventTitle.includes('wwe')) {
      channelName = 'Netflix';
    }

    if (eventTitle.includes('grand prix')) {
      channelName = 'Sky Sports F1';
    }

    if (eventTitle.includes('ufc')) {
      channelName = 'ESPN+';
    }

    const hasPlTeam = Array.from(premierLeagueTeams).some(plTeam => eventTitle.includes(plTeam));
    if ((!channelName || channelName.trim() === '') && hasPlTeam) {
      channelName = 'Now Sports';
    }

    const hasLaLigaTeam = Array.from(laLigaTeams).some(laTeam => eventTitle.includes(laTeam));
    if ((!channelName || channelName.trim() === '') && hasLaLigaTeam) {
      channelName = 'ESPN Deportes';
    }

    const hasMlsTeam = Array.from(mlsTeams).some(mlsTeam => eventTitle.includes(mlsTeam));
    if ((!channelName || channelName.trim() === '') && hasMlsTeam) {
      channelName = 'MLS Season Pass';
    }

    setTimeout(() => {
      const form = document.querySelector(`#form-${gameId}`);
      if (!form) {
        console.warn('Form not found for gameId:', gameId);
        return;
      }
      const streamUrl = findBestMatch(eventTitle);
      form.querySelector('#site').value = 'RoxieStreams';
      form.querySelector('#url').value = streamUrl;
      form.querySelector('#channel').value = (channelName ? (channelName + ' (FHD)') : 'Main (FHD)');
      form.querySelector('#fps').value = '60';

      const bitrateInput = form.querySelector('#bitrate') || form.querySelector('input[name="bitrate"]');
      if (bitrateInput) bitrateInput.value = '7000';

      const adsInput = form.querySelector('#ads') || form.querySelector('input[name="ads"]') || form.querySelector('input[name="numAds"]');
      if (adsInput) adsInput.value = '0';

      form.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = true);
      console.log(`Autofilled URL: ${streamUrl} and channel: ${channelName} with bitrate 7000 and ads 0`);
    }, 300);
  }

  function attachAutofill() {
    document.querySelectorAll('button.add.modal-trigger').forEach(button => {
      button.removeEventListener('click', autofillHandler);
      button.addEventListener('click', autofillHandler);
    });
  }

  attachAutofill();

  async function autoProcessAllEvents() {
    const buttons = Array.from(document.querySelectorAll('button.add.modal-trigger'));

    for (const button of buttons) {
      const gameId = button.getAttribute('data-target');
      console.log(`Opening modal for gameId ${gameId}`);
      button.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true }));

      await new Promise(res => setTimeout(res, 400)); // Wait for autofill

      const form = document.querySelector(`#form-${gameId}`);
      if (!form) {
        console.warn(`Form not found for gameId: ${gameId}`);
        continue;
      }
      const urlInput = form.querySelector('#url');
      if (!urlInput) {
        console.warn(`URL input not found for gameId: ${gameId}`);
        continue;
      }
      const urlValue = urlInput.value.trim();

      // SKIP modals/events whose URL is "missing"
      if (urlValue === 'https://roxiestreams.cc/missing') {
        console.log(`Skipping ${gameId}: URL is missing!`);
        // Optionally: You may wish to close the modal here so it doesn't remain open, OR ignore and let user close after
        // If you want to close, uncomment below:
        // const closeBtn = document.querySelector(`#submit-${gameId}`);
        // if (closeBtn) closeBtn.click();
        await new Promise(res => setTimeout(res, 400));
        continue;
      }

      // Valid URL found, click external submit button to save/close
      const submitBtn = document.querySelector(`#submit-${gameId}`);
      if (submitBtn) {
        submitBtn.focus();
        submitBtn.dispatchEvent(new MouseEvent('click', {bubbles: true, cancelable: true, view: window}));
        console.log(`Clicked external submit button for ${gameId}`);
      } else if (form) {
        form.submit();
        console.log(`Fallback: submitted form element for ${gameId}`);
      }
      await new Promise(res => setTimeout(res, 700));
    }
  }

  // Start automated modal processing
  autoProcessAllEvents();

  // For manual reruns, expose to window
  window.autoProcessAllEvents = autoProcessAllEvents;
})();
