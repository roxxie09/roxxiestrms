(async () => {
  if (!window.Fuse) {
    await new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/fuse.js@7.0.0';
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  const teamNameMap = {
  "aberdeen": "aberdeen",
  "aek athens": "aek athens",
  "aek larnaca": "aek larnaca",
  "aew": "aew",
  "aston villa": "aston villa",
  "basel": "basel",
  "brann": "brann",
  "celtic": "celtic",
  "crystal palace": "crystal palace",
  "denver nuggets": "denver nuggets",
  "formula 1 - usa grand prix": "formula 1 - usa grand prix",
  "go ahead eagles": "go ahead eagles",
  "golden state warriors": "golden state warriors",
  "indiana pacers": "indiana pacers",
  "lanus": "lanus",
  "ldu quito": "ldu quito",
  "los angeles chargers": "los angeles chargers",
  "lyon": "lyon",
  "minnesota vikings": "minnesota vikings",
  "nascar cup series - race": "nascar cup series - race",
  "nottingham forest": "nottingham forest",
  "oklahoma city thunder": "oklahoma city thunder",
  "palmeiras": "palmeiras",
  "porto": "porto",
  "rangers": "rangers",
  "roma": "roma",
  "seattle mariners": "seattle mariners",
  "sporting cristal": "sporting cristal",
  "sturm graz": "sturm graz",
  "toronto blue jays": "toronto blue jays",
  "universidad chile": "universidad chile",
  "universitario": "universitario",
  "viktoria plzeň": "viktoria plzeň",
  "nuggets": "denver nuggets",
  "warriors": "golden state warriors"
};

  const roxieStreamsCached = [
  {title: "aberdeen vs aek athens", url: "https://roxiestreams.cc/soccer-streams-1"},
  {title: "brann vs rangers", url: "https://roxiestreams.cc/soccer-streams-2"},
  {title: "aston villa vs go ahead eagles", url: "https://roxiestreams.cc/soccer-streams-3"},
  {title: "basel vs lyon", url: "https://roxiestreams.cc/soccer-streams-4"},
  {title: "aek larnaca vs crystal palace", url: "https://roxiestreams.cc/soccer-streams-1"},
  {title: "celtic vs sturm graz", url: "https://roxiestreams.cc/soccer-streams-2"},
  {title: "roma vs viktoria plzeň", url: "https://roxiestreams.cc/soccer-streams-5"},
  {title: "nottingham forest vs porto", url: "https://roxiestreams.cc/soccer-streams-6"},
  {title: "lanus vs universidad chile", url: "https://roxiestreams.cc/soccer-streams-7"},
  {title: "ldu quito vs palmeiras", url: "https://roxiestreams.cc/soccer-streams-7"},
  {title: "sporting cristal vs universitario", url: "https://roxiestreams.cc/soccer-streams-8"},
  {title: "seattle mariners vs toronto blue jays", url: "https://roxiestreams.cc/mlb-streams-1"},
  {title: "indiana pacers vs oklahoma city thunder", url: "https://roxiestreams.cc/nba-streams-1"},
  {title: "denver nuggets vs golden state warriors", url: "https://roxiestreams.cc/nba-streams-1"},
  {title: "nascar cup series - race", url: "https://roxiestreams.cc/nascar"},
  {title: "formula 1 - usa grand prix", url: "https://roxiestreams.cc/f1-streams"},
  {title: "aew", url: "https://roxiestreams.cc/aew"},
  {title: "los angeles chargers vs minnesota vikings", url: "https://roxiestreams.cc/nfl-streams-1"}
];

  function normalizeTeamName(name) {
    return teamNameMap[name.toLowerCase().trim()] || name.toLowerCase().trim();
  }

  function normalizeTitle(title) {
    let t = title.toLowerCase().replace(/@/g, 'vs').trim();
    if (!t.includes('vs')) {
      return normalizeTeamName(t);
    }
    let teams = t.split('vs').map(s => normalizeTeamName(s.trim()));
    teams.sort();
    return teams.join(' vs ');
  }

  const normalizedCache = roxieStreamsCached.map(item => ({
    title: normalizeTitle(item.title),
    url: item.url
  }));

  const fuse = new Fuse(normalizedCache, {
    keys: ['title'],
    threshold: 0.3,
    includeScore: true,
    distance: 50,
    ignoreLocation: true,
  });

  function findBestMatch(eventTitle) {
    const lowerTitle = eventTitle.toLowerCase();
    if (lowerTitle.includes("ufc")) return "https://roxiestreams.cc/ufc";
    if (lowerTitle.includes("grand prix")) return "https://roxiestreams.cc/f1-streams";

    let teams = [];
    if (lowerTitle.includes("@")) {
      teams = lowerTitle.split("@").map(t => normalizeTeamName(t.trim()));
    } else if (lowerTitle.includes("vs")) {
      teams = lowerTitle.split("vs").map(t => normalizeTeamName(t.trim()));
    } else {
      teams = [normalizeTeamName(lowerTitle.trim())];
    }

    if (teams.length === 0) return 'https://roxiestreams.cc/missing';

    for (const entry of normalizedCache) {
      for (const team of teams) {
        if (entry.title.includes(team)) return entry.url;
      }
    }
    return 'https://roxiestreams.cc/missing';
  }

  function getEventTitleFromListDiv(listDiv) {
    if (!listDiv) return '';
    let titleText = '';
    listDiv.childNodes.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        const trimmed = node.textContent.trim();
        if (trimmed) titleText += trimmed + ' ';
      }
    });
    return titleText.trim();
  }

  function autofillHandler(e) {
    const gameId = e.currentTarget.getAttribute('data-target');
    const listDiv = e.currentTarget.closest('.list');
    const eventTitle = getEventTitleFromListDiv(listDiv);
    console.log('Extracted event title:', eventTitle, 'for gameId:', gameId);

    // Get league/channel name from .league span; exclude if starts with digit (likely year)
    let channelName = '';
    const leagueSpan = listDiv ? listDiv.querySelector('span.league') : null;
    if (leagueSpan) {
      const leagueText = leagueSpan.textContent.trim();
      if (!/^\d/.test(leagueText)) {
        channelName = leagueText;
      }
    }

    setTimeout(() => {
      const form = document.querySelector(`#form-${gameId}`);
      if (!form) {
        console.warn('Form not found for gameId:', gameId);
        return;
      }
      const streamUrl = findBestMatch(eventTitle);
      form.querySelector('#site').value = 'RoxieStreams';
      form.querySelector('#url').value = streamUrl;
      form.querySelector('#channel').value = channelName || 'Main';
      form.querySelector('#fps').value = '60';

      const bitrateInput = form.querySelector('#bitrate') || form.querySelector('input[name="bitrate"]');
      if (bitrateInput) bitrateInput.value = '7000';

      const adsInput = form.querySelector('#ads') || form.querySelector('input[name="ads"]') || form.querySelector('input[name="numAds"]');
      if (adsInput) adsInput.value = '0';

      form.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = true);
      console.log(`Autofilled URL: ${streamUrl} and channel: ${channelName} with bitrate 7000 and ads 0`);
    }, 300);
  }

  function attachAutofill() {
    document.querySelectorAll('button.add.modal-trigger').forEach(button => {
      button.removeEventListener('click', autofillHandler);
      button.addEventListener('click', autofillHandler);
    });
  }

  attachAutofill();
})();
