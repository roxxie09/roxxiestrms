(async () => {
  if (!window.Fuse) {
    await new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/fuse.js@7.0.0';
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  const teamNameMap = {
  "aew": "aew",
  "angers sco": "angers sco",
  "arsenal": "arsenal",
  "atlanta hawks": "atlanta hawks",
  "austin": "austin",
  "baltimore ravens": "baltimore ravens",
  "bayern münchen": "bayern münchen",
  "boston celtics": "boston celtics",
  "brighton": "brighton",
  "brooklyn nets": "brooklyn nets",
  "ceará": "ceará",
  "chelsea": "chelsea",
  "chicago bulls": "chicago bulls",
  "cleveland cavaliers": "cleveland cavaliers",
  "crystal palace": "crystal palace",
  "dallas mavericks": "dallas mavericks",
  "denver nuggets": "denver nuggets",
  "detroit pistons": "detroit pistons",
  "fiorentina": "fiorentina",
  "flamengo": "flamengo",
  "fluminense": "fluminense",
  "formula 1 - mexico city grand prix": "formula 1 - mexico city grand prix",
  "golden state warriors": "golden state warriors",
  "houston rockets": "houston rockets",
  "indiana pacers": "indiana pacers",
  "inter milan": "inter milan",
  "juventus": "juventus",
  "köln": "köln",
  "lens": "lens",
  "lille": "lille",
  "liverpool": "liverpool",
  "lorient": "lorient",
  "los angeles dodgers": "los angeles dodgers",
  "los angeles fc": "los angeles fc",
  "los angeles lakers": "los angeles lakers",
  "lyon": "lyon",
  "mallorca": "mallorca",
  "manchester city": "manchester city",
  "marseille": "marseille",
  "mempis grizzlies": "mempis grizzlies",
  "metz": "metz",
  "miami dolphins": "miami dolphins",
  "miami heat": "miami heat",
  "milwaukee bucks": "milwaukee bucks",
  "minnesota timberwolves": "minnesota timberwolves",
  "monaco": "monaco",
  "nantes": "nantes",
  "nascar cup series - xfinity 500": "nascar cup series - xfinity 500",
  "new orleans pelicans": "new orleans pelicans",
  "newcastle": "newcastle",
  "nice": "nice",
  "oklahoma city thunder": "oklahoma city thunder",
  "orlando magic": "orlando magic",
  "paris": "paris",
  "parma": "parma",
  "phoenix suns": "phoenix suns",
  "portland trail blazers": "portland trail blazers",
  "psg": "psg",
  "racing club": "racing club",
  "rayo vallecano": "rayo vallecano",
  "roma": "roma",
  "sacromento kings": "sacromento kings",
  "san antonio spurs": "san antonio spurs",
  "sant just": "sant just",
  "swansea city": "swansea city",
  "toronto blue jays": "toronto blue jays",
  "toronto raptors": "toronto raptors",
  "tottenham": "tottenham",
  "udinese": "udinese",
  "utah jazz": "utah jazz",
  "washington wizards": "washington wizards",
  "wolves": "wolves",
  "wwe raw": "wwe raw",
  "wwe smackdown": "wwe smackdown",
  "yuncos": "yuncos",
  "hawks": "atlanta hawks",
  "celtics": "boston celtics",
  "bulls": "chicago bulls",
  "cavaliers": "cleveland cavaliers",
  "mavericks": "dallas mavericks",
  "nuggets": "denver nuggets",
  "pistons": "detroit pistons",
  "warriors": "golden state warriors",
  "rockets": "houston rockets",
  "pacers": "indiana pacers",
  "lakers": "los angeles lakers",
  "heat": "miami heat",
  "bucks": "milwaukee bucks",
  "timberwolves": "minnesota timberwolves",
  "pelicans": "new orleans pelicans",
  "thunder": "oklahoma city thunder",
  "magic": "orlando magic",
  "suns": "phoenix suns",
  "blazers": "portland trail blazers",
  "spurs": "san antonio spurs",
  "raptors": "toronto raptors",
  "jazz": "utah jazz",
  "wizards": "washington wizards"
};

  const roxieStreamsCached = [
  {title: "juventus vs udinese", url: "https://roxiestreams.cc/soccer-streams-1"},
  {title: "parma vs roma", url: "https://roxiestreams.cc/soccer-streams-2"},
  {title: "lille vs nice", url: "https://roxiestreams.cc/soccer-streams-3"},
  {title: "lorient vs psg", url: "https://roxiestreams.cc/soccer-streams-4"},
  {title: "lens vs metz", url: "https://roxiestreams.cc/soccer-streams-5"},
  {title: "mallorca vs sant just", url: "https://roxiestreams.cc/soccer-streams-6"},
  {title: "bayern münchen vs köln", url: "https://roxiestreams.cc/soccer-streams-7"},
  {title: "arsenal vs brighton", url: "https://roxiestreams.cc/soccer-streams-8"},
  {title: "crystal palace vs liverpool", url: "https://roxiestreams.cc/soccer-streams-9"},
  {title: "chelsea vs wolves", url: "https://roxiestreams.cc/soccer-streams-10"},
  {title: "manchester city vs swansea city", url: "https://roxiestreams.cc/soccer-streams-11"},
  {title: "fiorentina vs inter milan", url: "https://roxiestreams.cc/soccer-streams-12"},
  {title: "rayo vallecano vs yuncos", url: "https://roxiestreams.cc/soccer-streams-13"},
  {title: "newcastle vs tottenham", url: "https://roxiestreams.cc/soccer-streams-14"},
  {title: "monaco vs nantes", url: "https://roxiestreams.cc/soccer-streams-3"},
  {title: "lyon vs paris", url: "https://roxiestreams.cc/soccer-streams-5"},
  {title: "angers sco vs marseille", url: "https://roxiestreams.cc/soccer-streams-4"},
  {title: "ceará vs fluminense", url: "https://roxiestreams.cc/soccer-streams-15"},
  {title: "flamengo vs racing club", url: "https://roxiestreams.cc/soccer-streams-16"},
  {title: "austin vs los angeles fc", url: "https://roxiestreams.cc/soccer-streams-17"},
  {title: "los angeles dodgers vs toronto blue jays", url: "https://roxiestreams.cc/mlb-streams-1"},
  {title: "houston rockets vs toronto raptors", url: "https://roxiestreams.cc/nba-streams-1"},
  {title: "detroit pistons vs orlando magic", url: "https://roxiestreams.cc/nba-streams-2"},
  {title: "boston celtics vs cleveland cavaliers", url: "https://roxiestreams.cc/nba-streams-3"},
  {title: "atlanta hawks vs brooklyn nets", url: "https://roxiestreams.cc/nba-streams-4"},
  {title: "chicago bulls vs sacromento kings", url: "https://roxiestreams.cc/nba-streams-5"},
  {title: "dallas mavericks vs indiana pacers", url: "https://roxiestreams.cc/nba-streams-6"},
  {title: "denver nuggets vs new orleans pelicans", url: "https://roxiestreams.cc/nba-streams-7"},
  {title: "portland trail blazers vs utah jazz", url: "https://roxiestreams.cc/nba-streams-8"},
  {title: "los angeles lakers vs minnesota timberwolves", url: "https://roxiestreams.cc/nba-streams-3"},
  {title: "mempis grizzlies vs phoenix suns", url: "https://roxiestreams.cc/nba-streams-9"},
  {title: "oklahoma city thunder vs washington wizards", url: "https://roxiestreams.cc/nba-streams-2"},
  {title: "golden state warriors vs milwaukee bucks", url: "https://roxiestreams.cc/nba-streams-3"},
  {title: "miami heat vs san antonio spurs", url: "https://roxiestreams.cc/nba-streams-4"},
  {title: "nascar cup series - xfinity 500", url: "https://roxiestreams.cc/nascar"},
  {title: "formula 1 - mexico city grand prix", url: "https://roxiestreams.cc/f1-streams"},
  {title: "aew", url: "https://roxiestreams.cc/aew"},
  {title: "wwe smackdown", url: "https://roxiestreams.cc/wwe-streams"},
  {title: "wwe raw", url: "https://roxiestreams.cc/wwe-streams"},
  {title: "baltimore ravens vs miami dolphins", url: "https://roxiestreams.cc/nfl-streams-1"}
];

  const nbaTeams = new Set(["chicago bulls","indiana pacers","houston rockets","orlando magic","utah jazz","charlotte hornets","minnesota timberwolves","memphis grizzlies","detroit pistons","milwaukee bucks","atlanta hawks","san antonio spurs","los angeles clippers","new york knicks","oklahoma city thunder","dallas mavericks","new orleans pelicans","golden state warriors","los angeles lakers","cleveland cavaliers","washington wizards","boston celtics","portland trail blazers","toronto raptors","sacramento kings","denver nuggets","miami heat","philadelphia 76ers","phoenix suns"]);
  const premierLeagueTeams = new Set(["leeds","west ham","c palace","nottm forest","man united","man city","newcastle","brighton","brentford","liverpool","spurs"]);
  const laLigaTeams = new Set(["alaves","athletic bilbao","atm","atletico madrid","barcelona","celta vigo","elche","espanyol","getafe","girona","mallorca","osasuna","rayo vallecano","real betis","real madrid","real sociedad","real valladolid","sevilla","valencia","villarreal"]);
  const mlsTeams = new Set(["miami","atlanta","chicago","cincinnati","columbus","dallas","dc","houston","los angeles","minnesota","nashville","new england","new york","orlando","philadelphia","portland","real salt lake","seattle","sporting kansas city","san jose","toronto","vancouver"]);

function normalizeTeamName(name) {
  return teamNameMap[name.toLowerCase().trim()] || name.toLowerCase().trim();
}

  function normalizeTitle(title) {
    let t = title.toLowerCase().replace(/@/g, 'vs').trim();
    if (!t.includes('vs')) {
      return normalizeTeamName(t);
    }
    let teams = t.split('vs').map(s => normalizeTeamName(s.trim()));
    teams.sort();
    return teams.join(' vs ');
  }

const normalizedCache = roxieStreamsCached.map(item => ({
  title: normalizeTitle(item.title),
  url: item.url
}));

  const fuse = new Fuse(normalizedCache, {
    keys: ['title'],
    threshold: 0.3,
    includeScore: true,
    distance: 50,
    ignoreLocation: true,
  });

  function findBestMatch(eventTitle) {
    const lowerTitle = eventTitle.toLowerCase();
    if (lowerTitle.includes("ufc")) return "https://roxiestreams.cc/ufc";
    if (lowerTitle.includes("grand prix")) return "https://roxiestreams.cc/f1-streams";
    if (lowerTitle.includes("wwe")) return "https://roxiestreams.cc/wwe-streams";

    let teams = [];
    if (lowerTitle.includes("@")) {
      teams = lowerTitle.split("@").map(t => normalizeTeamName(t.trim()));
    } else if (lowerTitle.includes("vs")) {
      teams = lowerTitle.split("vs").map(t => normalizeTeamName(t.trim()));
    } else {
      teams = [normalizeTeamName(lowerTitle.trim())];
    }

    if (teams.length === 0) return 'https://roxiestreams.cc/missing';

    for (const entry of normalizedCache) {
      for (const team of teams) {
        if (entry.title.includes(team)) return entry.url;
      }
    }
    return 'https://roxiestreams.cc/missing';
  }

  function getEventTitleFromListDiv(listDiv) {
    if (!listDiv) return '';
    let titleText = '';
    listDiv.childNodes.forEach(node => {
      if (node.nodeType === Node.TEXT_NODE) {
        const trimmed = node.textContent.trim();
        if (trimmed) titleText += trimmed + ' ';
      }
    });
    return titleText.trim();
  }

  function autofillHandler(e) {
    const gameId = e.currentTarget.getAttribute('data-target');
    const listDiv = e.currentTarget.closest('.list');
    const eventTitle = getEventTitleFromListDiv(listDiv).toLowerCase();
    console.log('Extracted event title:', eventTitle, 'for gameId:', gameId);

    let channelName = '';
    const leagueSpan = listDiv ? listDiv.querySelector('span.league') : null;
    if (leagueSpan) {
      const leagueText = leagueSpan.textContent.trim();
      if (!/^\d/.test(leagueText)) {
        channelName = leagueText;
      }
    }

    const nbaShortNames = Object.keys(teamNameMap).filter(key => nbaTeams.has(teamNameMap[key].toLowerCase()));
    const hasNbaShortName = nbaShortNames.some(shortName => eventTitle.includes(shortName.toLowerCase()));

    if ((!channelName || channelName.trim() === '') && hasNbaShortName) {
      channelName = 'NBA League Pass';
    }

    if (eventTitle.includes('wwe')) {
      channelName = 'Netflix';
    }

    if (eventTitle.includes('grand prix')) {
      channelName = 'Sky Sports F1';
    }

    if (eventTitle.includes('ufc')) {
      channelName = 'ESPN+';
    }

    const hasPlTeam = Array.from(premierLeagueTeams).some(plTeam => eventTitle.includes(plTeam));
    if ((!channelName || channelName.trim() === '') && hasPlTeam) {
      channelName = 'Now Sports';
    }

    const hasLaLigaTeam = Array.from(laLigaTeams).some(laTeam => eventTitle.includes(laTeam));
    if ((!channelName || channelName.trim() === '') && hasLaLigaTeam) {
      channelName = 'ESPN Deportes';
    }

    const hasMlsTeam = Array.from(mlsTeams).some(mlsTeam => eventTitle.includes(mlsTeam));
    if ((!channelName || channelName.trim() === '') && hasMlsTeam) {
      channelName = 'MLS Season Pass';
    }

    setTimeout(() => {
      const form = document.querySelector(`#form-${gameId}`);
      if (!form) {
        console.warn('Form not found for gameId:', gameId);
        return;
      }
      const streamUrl = findBestMatch(eventTitle);
      form.querySelector('#site').value = 'RoxieStreams';
      form.querySelector('#url').value = streamUrl;
      form.querySelector('#channel').value = (channelName ? (channelName + ' (FHD)') : 'Main (FHD)');
      form.querySelector('#fps').value = '60';

      const bitrateInput = form.querySelector('#bitrate') || form.querySelector('input[name="bitrate"]');
      if (bitrateInput) bitrateInput.value = '7000';

      const adsInput = form.querySelector('#ads') || form.querySelector('input[name="ads"]') || form.querySelector('input[name="numAds"]');
      if (adsInput) adsInput.value = '0';

      form.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = true);
      console.log(`Autofilled URL: ${streamUrl} and channel: ${channelName} with bitrate 7000 and ads 0`);
    }, 300);
  }

  function attachAutofill() {
    document.querySelectorAll('button.add.modal-trigger').forEach(button => {
      button.removeEventListener('click', autofillHandler);
      button.addEventListener('click', autofillHandler);
    });
  }

  attachAutofill();

  async function autoProcessAllEvents() {
    const buttons = Array.from(document.querySelectorAll('button.add.modal-trigger'));

    for (const button of buttons) {
      const gameId = button.getAttribute('data-target');
      console.log(`Opening modal for gameId ${gameId}`);
      button.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true }));

      await new Promise(res => setTimeout(res, 400)); // Wait for autofill

      const form = document.querySelector(`#form-${gameId}`);
      if (!form) {
        console.warn(`Form not found for gameId: ${gameId}`);
        continue;
      }
      const urlInput = form.querySelector('#url');
      if (!urlInput) {
        console.warn(`URL input not found for gameId: ${gameId}`);
        continue;
      }
      const urlValue = urlInput.value.trim();

      // SKIP modals/events whose URL is "missing"
      if (urlValue === 'https://roxiestreams.cc/missing') {
        console.log(`Skipping ${gameId}: URL is missing!`);
        // Optionally: You may wish to close the modal here so it doesn't remain open, OR ignore and let user close after
        // If you want to close, uncomment below:
        // const closeBtn = document.querySelector(`#submit-${gameId}`);
        // if (closeBtn) closeBtn.click();
        await new Promise(res => setTimeout(res, 400));
        continue;
      }

      // Valid URL found, click external submit button to save/close
      const submitBtn = document.querySelector(`#submit-${gameId}`);
      if (submitBtn) {
        submitBtn.focus();
        submitBtn.dispatchEvent(new MouseEvent('click', {bubbles: true, cancelable: true, view: window}));
        console.log(`Clicked external submit button for ${gameId}`);
      } else if (form) {
        form.submit();
        console.log(`Fallback: submitted form element for ${gameId}`);
      }
      await new Promise(res => setTimeout(res, 700));
    }
  }

  // Start automated modal processing
  autoProcessAllEvents();

  // For manual reruns, expose to window
  window.autoProcessAllEvents = autoProcessAllEvents;
})();
